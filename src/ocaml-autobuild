#!/usr/bin/ocamlrun ocaml

#use "topfind";;

let create package_name package_version = 
  let write_file fn str =
    let fd =
      open_out fn
    in
      output_string fd str;
      close_out fd
  in
  (* build.ml *)
  let () = 
    write_file "build.ml" ("\
#directory \"../ocaml-autobuild/src/base\";;
#use \"buildSys.ml\";;

module Env = Environment;;
module Msg = Message;;

let targets, env =
  Action.configure 
    \""^package_name^"\"
    \""^package_version^"\"
    (* Command line argument *)
    [
      BuildArg.base;
      BuildArg.wth 
        \"build_date\"
        \"Date of build\"
        \"none\";
    ]
    (* Checks*)
    [
      Check.ocamlbuild_base
    ]
    (* .in files *)
    [
      \""^package_name^".itarget.in\";
    ]
;;

let () =
  Action.process_targets
    (Action.ocamlbuild_targets [\""^package_name^".otarget\"])
    targets
    env
;;")
  in

  (* Makefile *)
  let () = 
    write_file "Makefile" "\
# File auto-generated by ocaml-autobuild

BUILD=ocaml $(CURDIR)/build.ml

# Default target
all:
\t$(BUILD) $@

clean:
\t$(BUILD) $@

distclean:
\t$(BUILD) $@

install:
\t$(BUILD) $@

# Catch all rule
%:
\t$(BUILD) $@

.PHONY: all install clean distclean"
  in

  (* build.sh *)
  let () = 
    write_file "build.sh"
"#!/bin/sh

exec ocaml $(dirname $0)/build.ml $*
"
  in
  (* build.bat *)
  let () = 
    write_file "build.bat"
"rem TODO"
  in

  (* package_name.itarget.in *)
  let () =
    write_file (package_name^".itarget.in") ""
  in
    ()
;;

let () = 
  let args = 
    [
      "--create",
      Arg.Tuple 
        (
          let (pkg_name, pkg_ver) = 
            ref "none", ref "none"
          in
            [
              Arg.Set_string pkg_name;
              Arg.Set_string pkg_ver;
              Arg.Unit (fun () -> create !pkg_name !pkg_ver)
            ]
        ),
      " Populate a project with required files";
    ]
  in
    Arg.parse 
      (Arg.align args)
      ignore 
      "TODO"
;;
